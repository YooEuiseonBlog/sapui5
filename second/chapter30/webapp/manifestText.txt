SAP Fiori 런치패드는 애플리케이션 컨테이너 역할을 하며 부트스트랩용 로컬 HTML 파일 없이 앱을 인스턴스화합니다. 
대신 설명자 파일이 구문 분석되고 구성 요소가 현재 HTML 페이지에 로드됩니다. 이를 통해 여러 앱을 동일한 컨텍스트에 표시할 수 있습니다.
각 앱은 언어 속성, 지원되는 장치 등과 같은 로컬 설정을 정의할 수 있습니다. 
또한 설명자 파일을 사용하여 추가 리소스를 로드하고 i18n 리소스 번들과 같은 모델을 인스턴스화할 수 있습니다.


주의!
자동 모델 인스턴스화는 SAPUI5 버전 1.30에서만 사용할 수 있습니다. 
이전 버전을 사용하는 경우 9단계: 구성 요소 구성에서 수행한 것처럼 Component.js 파일의 init 메서드에서 앱의 리소스 번들 및 기타 모델을 수동으로 인스턴스화할 수 있습니다.


메모!
이 자습서에서는 설명자 파일의 가장 중요한 설정과 매개변수만 소개합니다. SAP Web IDE에서 일부 설정이 누락되어 유효성 검사 오류가 발생할 수 있습니다. 이 컨텍스트에서는 무시할 수 있습니다.


manifest.json 파일의 콘텐츠는 모든 글로벌 애플리케이션 설정 및 매개변수를 포함하는 JSON 형식의 구성 개체입니다. 
매니페스트 파일은 응용 프로그램, 구성 요소 및 라이브러리에 대한 설명자라고 하며 응용 프로그램에 사용될 때 "설명자" 또는 "앱 설명자"라고도 합니다. 
webapp 폴더에 저장되고 구성 요소를 인스턴스화하기 위해 SAPUI5에서 읽습니다. manifest.json 파일에는 네임스페이스로 정의된 세 가지 중요한 섹션이 있습니다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sap.app

sap.app 네임스페이스에는 다음과 같은 애플리케이션별 속성이 포함되어 있습니다.

id(필수): 애플리케이션 구성 요소의 네임스페이스

ID는 70자를 초과할 수 없습니다. 고유해야 하며 구성 요소 ID/네임스페이스와 일치해야 합니다.

type: 구성하려는 항목을 정의합니다. 여기서는 애플리케이션입니다.

i18n: 리소스 번들 파일의 경로를 정의합니다.

title: 앱의 리소스 번들에서 참조되는 핸들바 구문의 애플리케이션 제목

description: 앱의 리소스 번들에서 참조되는 핸들바 구문에서 애플리케이션이 수행하는 짧은 설명 텍스트

applicationVersion: 나중에 애플리케이션을 쉽게 업데이트할 수 있는 애플리케이션 버전

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sap.ui

sap.ui 네임스페이스는 다음과 같은 UI 관련 속성을 제공합니다.

technology: 이 값은 UI 기술을 지정합니다. 우리의 경우 SAPUI5를 사용합니다.

deviceTypes: 앱에서 지원하는 기기(데스크톱, 태블릿, 전화)를 알려줍니다(기본적으로 모두 true).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sap.ui5

sap.ui5 네임스페이스는 SAPUI5에서 자동으로 처리되는 SAPUI5 관련 구성 매개변수를 추가합니다. 가장 중요한 매개변수는 다음과 같습니다.

rootView: 이 매개 변수를 지정하면 구성 요소가 자동으로 보기를 인스턴스화하고 이 구성 요소의 루트로 사용합니다.

dependencies: 여기에서 애플리케이션에서 사용되는 UI 라이브러리를 선언합니다.

models(모델): 디스크립터의 이 섹션에서는 앱이 시작될 때 SAPUI5에 의해 자동으로 인스턴스화되는 모델을 정의할 수 있습니다. 
여기에서 이제 로컬 리소스 번들을 정의할 수 있습니다. 모델 이름 "i18n"을 키로 정의하고 네임스페이스별로 번들 파일을 지정합니다. 
이전 단계에서와 같이 번역된 텍스트가 포함된 파일은 i18n 폴더에 i18n.properties라는 이름으로 저장됩니다.
파일 경로에 앱의 네임스페이스를 접두사로 붙이기만 하면 됩니다. 앱 구성 요소의 init 메서드에서 수동 인스턴스화는 이 단계의 뒷부분에서 제거됩니다. 
supportLocales 및 fallbackLocale 속성은 빈 문자열로 설정되어 있습니다. 
이 튜토리얼에서 데모 앱은 단순화를 위해 하나의 i18n.properties 파일만 사용하고 브라우저가 사용자의 기반으로 추가 i18n_*.properties 파일을 로드하지 못하도록 하고 싶습니다.
브라우저 설정 및 로케일.


호환성을 위해 루트 개체와 각 섹션은 내부 속성 _version 아래에 설명자 버전 번호 1.1.0을 명시합니다. 
기능은 설명자의 향후 버전에서 추가되거나 변경될 수 있으며 버전 번호는 설명자를 읽는 도구로 애플리케이션 설정을 식별하는 데 도움이 됩니다.


주목!
리소스 번들의 속성은 설명자에서 두 개의 중괄호로 묶여 있습니다. 
이것은 SAPUI5 데이터 바인딩 구문이 아니라 handlebars 구문의 설명자에 있는 리소스 번들에 대한 변수 참조입니다. 
참조된 텍스트는 이 자습서에서 빌드한 앱에 표시되지 않지만 SAP Fiori 런치패드와 같은 애플리케이션 컨테이너에서 읽을 수 있습니다.

--------------------------------------------------------------------------------------------------------------------------------------------
sap.ui5 네임스페이스의 리소스 섹션에서 앱에 대한 추가 리소스를 로드할 수 있습니다.
구성 요소에 상대적인 URI를 정의하여 CSS 스타일을 로드합니다. 
그런 다음 SAPUI5는 이 파일을 일반 웹 페이지와 마찬가지로 HTML 페이지의 헤더에 <link> 태그로 추가하고 브라우저가 자동으로 로드합니다.

-----------------------------------------------------------------------------------------------------------------------------------------------------
지금까지 모든 앱 콘텐츠를 하나의 단일 페이지에 넣었습니다. 
점점 더 많은 기능을 추가함에 따라 콘텐츠를 분할하여 별도의 페이지에 배치하려고 합니다.

인보이스를 표시하기 위해 두 번째 페이지가 추가되었습니다.

------------------------------------------------------------------------------------------------------------------------------------
설명자의 sap.ui5 부분에 새 "routing" 섹션을 추가합니다. 
앱의 라우팅 및 탐색 구조를 정의하는 세 개의 하위 섹션이 있습니다.

구성(config)

이 섹션에는 모든 경로 및 대상에 적용되는 전역 라우터 구성 및 기본값이 포함되어 있습니다. 
사용하려는 라우터 클래스와 앱에서 보기view가 있는 위치를 정의합니다. 
보기view를 자동으로 로드하고 표시하기 위해 페이지를 표시하는 데 사용할 컨트롤과 새 페이지가 표시될 때 
채워야 하는 집계(controlAggregation)도 지정합니다.


경로(routes)

각 경로는 경로에 도달했을 때 탐색할 이름, 패턴 및 하나 이상의 대상을 정의합니다. 
패턴은 기본적으로 경로와 일치하는 URL 부분이며 앱에 대해 두 개의 경로를 정의합니다. 
첫 번째는 이전 단계의 콘텐츠가 있는 개요 페이지를 표시하는 기본 경로이고 
두 번째는 새 페이지를 표시하는 URL 패턴 세부 정보가 있는 세부 경로입니다.

대상(targets)

대상(targets)은 표시되는 보기(view)를 정의하고 하나 이상의 경로와 연결되며 앱 내에서 수동으로 표시할 수도 있습니다. 
대상이 표시될 때마다 해당 뷰가 로드되어 앱에 표시됩니다. 
우리 앱에서는 대상(target) 이름(name)에 해당하는 보기(view) 이름(name)으로 두 대상을 정의하기만 하면 됩니다.